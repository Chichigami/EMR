// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, hashed_password, 
    last_name, first_name, 
    permissions
)
VALUES(
    $1, $2, 
    $3, $4, 
    $5
)
RETURNING id, created_at, updated_at, username, hashed_password, last_name, first_name, permissions
`

type CreateUserParams struct {
	Username       string
	HashedPassword string
	LastName       string
	FirstName      string
	Permissions    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.LastName,
		arg.FirstName,
		arg.Permissions,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.HashedPassword,
		&i.LastName,
		&i.FirstName,
		&i.Permissions,
	)
	return i, err
}

const getHashedPassword = `-- name: GetHashedPassword :exec
SELECT hashed_password
FROM users
WHERE username = $1
`

func (q *Queries) GetHashedPassword(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, getHashedPassword, username)
	return err
}

const updateUserPermissions = `-- name: UpdateUserPermissions :exec
UPDATE users
SET permissions = $2, updated_at = NOW()
WHERE username = $1
`

type UpdateUserPermissionsParams struct {
	Username    string
	Permissions string
}

func (q *Queries) UpdateUserPermissions(ctx context.Context, arg UpdateUserPermissionsParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPermissions, arg.Username, arg.Permissions)
	return err
}
