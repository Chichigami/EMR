// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: patients.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createPatient = `-- name: CreatePatient :one
INSERT INTO patients (
    last_name, first_name, middle_name, 
    date_of_birth, sex, social_security_number, 
    pharmacy, email, location_address, zip_code, 
    cell_phone_number, home_phone_number, 
    marital_status, chart_id, primary_care_doctor)
VALUES(
    $1, $2, $3,
    $4, $5, $6,
    $7, $8, $9, $10,
    $11, $12,
    $13, $14, $15
)
RETURNING id, created_at, updated_at, last_name, first_name, middle_name, date_of_birth, sex, social_security_number, pharmacy, email, location_address, zip_code, cell_phone_number, home_phone_number, marital_status, chart_id, primary_care_doctor
`

type CreatePatientParams struct {
	LastName             string
	FirstName            string
	MiddleName           sql.NullString
	DateOfBirth          time.Time
	Sex                  string
	SocialSecurityNumber sql.NullString
	Pharmacy             sql.NullString
	Email                sql.NullString
	LocationAddress      string
	ZipCode              string
	CellPhoneNumber      sql.NullString
	HomePhoneNumber      sql.NullString
	MaritalStatus        sql.NullString
	ChartID              sql.NullInt32
	PrimaryCareDoctor    sql.NullString
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (Patient, error) {
	row := q.db.QueryRowContext(ctx, createPatient,
		arg.LastName,
		arg.FirstName,
		arg.MiddleName,
		arg.DateOfBirth,
		arg.Sex,
		arg.SocialSecurityNumber,
		arg.Pharmacy,
		arg.Email,
		arg.LocationAddress,
		arg.ZipCode,
		arg.CellPhoneNumber,
		arg.HomePhoneNumber,
		arg.MaritalStatus,
		arg.ChartID,
		arg.PrimaryCareDoctor,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastName,
		&i.FirstName,
		&i.MiddleName,
		&i.DateOfBirth,
		&i.Sex,
		&i.SocialSecurityNumber,
		&i.Pharmacy,
		&i.Email,
		&i.LocationAddress,
		&i.ZipCode,
		&i.CellPhoneNumber,
		&i.HomePhoneNumber,
		&i.MaritalStatus,
		&i.ChartID,
		&i.PrimaryCareDoctor,
	)
	return i, err
}

const deletePatient = `-- name: DeletePatient :exec
DELETE FROM patients
WHERE chart_id = $1
`

func (q *Queries) DeletePatient(ctx context.Context, chartID sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, deletePatient, chartID)
	return err
}

const getPatient = `-- name: GetPatient :many
SELECT id, created_at, updated_at, last_name, first_name, middle_name, date_of_birth, sex, social_security_number, pharmacy, email, location_address, zip_code, cell_phone_number, home_phone_number, marital_status, chart_id, primary_care_doctor
FROM patients
WHERE chart_id = $1 OR date_of_birth = $1 OR last_name = $1 AND first_name = $2
`

type GetPatientParams struct {
	ChartID   sql.NullInt32
	FirstName string
}

func (q *Queries) GetPatient(ctx context.Context, arg GetPatientParams) ([]Patient, error) {
	rows, err := q.db.QueryContext(ctx, getPatient, arg.ChartID, arg.FirstName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastName,
			&i.FirstName,
			&i.MiddleName,
			&i.DateOfBirth,
			&i.Sex,
			&i.SocialSecurityNumber,
			&i.Pharmacy,
			&i.Email,
			&i.LocationAddress,
			&i.ZipCode,
			&i.CellPhoneNumber,
			&i.HomePhoneNumber,
			&i.MaritalStatus,
			&i.ChartID,
			&i.PrimaryCareDoctor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
