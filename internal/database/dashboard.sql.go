// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: dashboard.sql

package database

import (
	"context"
	"time"

	"github.com/sqlc-dev/pqtype"
)

const createDashboard = `-- name: CreateDashboard :one
INSERT INTO dashboards (
    date_of, dashboard_state
)
VALUES (
    $1, $2
)
ON CONFLICT (
    date_of
)
DO UPDATE SET dashboard_state = $2, updated_at = NOW()
RETURNING dashboard_state
`

type CreateDashboardParams struct {
	DateOf         time.Time
	DashboardState pqtype.NullRawMessage
}

func (q *Queries) CreateDashboard(ctx context.Context, arg CreateDashboardParams) (pqtype.NullRawMessage, error) {
	row := q.db.QueryRowContext(ctx, createDashboard, arg.DateOf, arg.DashboardState)
	var dashboard_state pqtype.NullRawMessage
	err := row.Scan(&dashboard_state)
	return dashboard_state, err
}

const getDashboard = `-- name: GetDashboard :one
SELECT dashboard_state
FROM dashboards
WHERE date_of = $1
`

func (q *Queries) GetDashboard(ctx context.Context, dateOf time.Time) (pqtype.NullRawMessage, error) {
	row := q.db.QueryRowContext(ctx, getDashboard, dateOf)
	var dashboard_state pqtype.NullRawMessage
	err := row.Scan(&dashboard_state)
	return dashboard_state, err
}

const updateDashboard = `-- name: UpdateDashboard :exec
UPDATE dashboards
SET dashboard_state = $2, updated_at = NOW()
WHERE date_of = $1
`

type UpdateDashboardParams struct {
	DateOf         time.Time
	DashboardState pqtype.NullRawMessage
}

func (q *Queries) UpdateDashboard(ctx context.Context, arg UpdateDashboardParams) error {
	_, err := q.db.ExecContext(ctx, updateDashboard, arg.DateOf, arg.DashboardState)
	return err
}
