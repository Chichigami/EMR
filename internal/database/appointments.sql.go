// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: appointments.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createAppointmentForPatient = `-- name: CreateAppointmentForPatient :one
INSERT INTO appointments (
    appointment_date, chart_id, reasoning
) 
VALUES (
    $1, $2, $3
)
RETURNING id, created_at, updated_at, appointment_date, chart_id, reasoning
`

type CreateAppointmentForPatientParams struct {
	AppointmentDate time.Time
	ChartID         int32
	Reasoning       sql.NullString
}

func (q *Queries) CreateAppointmentForPatient(ctx context.Context, arg CreateAppointmentForPatientParams) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, createAppointmentForPatient, arg.AppointmentDate, arg.ChartID, arg.Reasoning)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AppointmentDate,
		&i.ChartID,
		&i.Reasoning,
	)
	return i, err
}

const deleteAppointment = `-- name: DeleteAppointment :exec
DELETE FROM appointments
WHERE chart_id = $1 AND appointment_date = $2
`

type DeleteAppointmentParams struct {
	ChartID         int32
	AppointmentDate time.Time
}

func (q *Queries) DeleteAppointment(ctx context.Context, arg DeleteAppointmentParams) error {
	_, err := q.db.ExecContext(ctx, deleteAppointment, arg.ChartID, arg.AppointmentDate)
	return err
}
