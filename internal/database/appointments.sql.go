// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: appointments.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createAppointmentForPatient = `-- name: CreateAppointmentForPatient :one
INSERT INTO appointments (
    patient_id, appointment, reasoning
) 
VALUES (
    $1, $2, $3
)
RETURNING id, created_at, updated_at, appointment, patient_id, reasoning
`

type CreateAppointmentForPatientParams struct {
	PatientID   int32
	Appointment time.Time
	Reasoning   sql.NullString
}

func (q *Queries) CreateAppointmentForPatient(ctx context.Context, arg CreateAppointmentForPatientParams) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, createAppointmentForPatient, arg.PatientID, arg.Appointment, arg.Reasoning)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Appointment,
		&i.PatientID,
		&i.Reasoning,
	)
	return i, err
}

const deleteAppointment = `-- name: DeleteAppointment :exec
DELETE FROM appointments
WHERE id = $1
`

func (q *Queries) DeleteAppointment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAppointment, id)
	return err
}

const getAppointmentsBasedOnDay = `-- name: GetAppointmentsBasedOnDay :many
SELECT id, created_at, updated_at, appointment, patient_id, reasoning
FROM appointments
WHERE appointment = $1
`

func (q *Queries) GetAppointmentsBasedOnDay(ctx context.Context, appointment time.Time) ([]Appointment, error) {
	rows, err := q.db.QueryContext(ctx, getAppointmentsBasedOnDay, appointment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Appointment,
			&i.PatientID,
			&i.Reasoning,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppointment = `-- name: UpdateAppointment :exec
UPDATE appointments
SET appointment = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateAppointmentParams struct {
	ID          uuid.UUID
	Appointment time.Time
}

func (q *Queries) UpdateAppointment(ctx context.Context, arg UpdateAppointmentParams) error {
	_, err := q.db.ExecContext(ctx, updateAppointment, arg.ID, arg.Appointment)
	return err
}
